#!/usr/bin/python

import os.path
import numpy as np
import getpass
import argparse
import datetime
from urllib2 import urlopen

CRED = '\33[31m'
CGREEN = '\33[32m'
CYELLOW = '\33[33m'
CEND = '\033[0m'


def get_data(symbol, interval):
    url = "http://finance.google.com/finance/getprices?q={0}".format(symbol)
    url += "&i={0}&p=1d&f=o,h,l,c".format(interval)
    csv = urlopen(url).readlines()

    # removing title headers and adding it to dataframe
    csv = np.asarray(csv[7:])
    data = []
    for entry in csv:
        add = entry.decode('utf8').split(',')
        data.append(add)

    for entry in data:
        for i in range(len(entry)):
            entry[i] = float(entry[i])
    return data


def get_y(data):
    top = 0
    bottom = 999999999
    for i in data:
        if i[1] < bottom:
            bottom = i[1]
        if i[2] < bottom:
            bottom = i[2]
        if i[1] > top:
            top = i[1]
        if i[2] > top:
            top = i[2]

    return top, bottom


def plot_it(symbol, interval):
    data = get_data(symbol, interval)
    top, bottom = get_y(data)
    yaxis = np.linspace(top, bottom, 30)
    # close high low open
    now = datetime.datetime.now()
    print(CYELLOW + symbol + CEND + " for " + now.strftime("%Y-%m-%d"))
    for entry in yaxis:
        outstring = '' + str(round(entry, 1)) + ' '
        for price in data:
            if price[0] > price[3]:
                c = CGREEN + 'o' + CEND
                top = price[0]
                bot = price[3]
            else:
                c = CRED + 'o' + CEND
                top = price[3]
                bot = price[0]

            if entry > price[1]:
                outstring += ' '
            elif price[1] <= entry:
                outstring += '|'
            elif entry <= top and entry >= bot:
                outstring += c
            elif price[2] <= entry:
                outstring += '|'
            else:
                outstring += " "
        print(outstring)


def main():
    parser = argparse.ArgumentParser(description='Outputs stock chart of symbol\
                                     with the specified granularity \
                                     (defaults to 300s if none entered)')
    parser.add_argument('-c', help='clear all of the symbols in list',
                        required=False, action='store_true')
    parser.add_argument('-a', help='add the following symbol to shortlist',
                        required=False)
    parser.add_argument('-s', help='used to input the symbol for ticker',
                        required=False)
    parser.add_argument('-d', help='delete this symbol',
                        required=False)
    parser.add_argument('-i', help='input the interval of data (seconds)',
                        required=False)

    filename = "/usr/local/bin/" + getpass.getuser() + '-candle-list.txt'
    if not os.path.isfile(filename):
        f = open(filename, "w")

    args = vars(parser.parse_args())
    symbol = args['s']
    interval = args['i']
    add = args['a']
    delete = args['d']
    clear = args['c']

    interval = 300 if not args['i'] else args['i']
    if symbol:
        plot_it(symbol.upper(), interval)
    if add:
        f = open(filename, "r")
        symbols = f.readlines()
        if add.upper()+'\n' in symbols:
            print(CYELLOW + add.upper() + CEND + " already in list!")
        else:
            f = open(filename, "a")
            f.write(add.upper()+'\n')
    if clear:
        f = open(filename, "w")
        f.write("")
    if delete:
        f = open(filename, "r")
        symbols = f.readlines()
        if delete.upper()+'\n' in symbols:
            symbols.remove(delete.upper()+'\n')
            f = open(filename, "w")
            for symbol in symbols:
                f.write(symbol)

    if not symbol and not add:
        f = open(filename, "r")
        symbols = f.readlines()
        for symbol in symbols:
            if symbol:
                plot_it(symbol[:-1], interval)

if __name__ == "__main__":
    main()
